◆ 순환(Recursion)의 개념과 기본예제 1

 **Code01.java 예제 참고 
 
Recursion을 한마디로? 자기 자신을 호출하는 함수(재귀함수)

 - 만약 자기 자신함수를 호출하면 어떻게 되는가?
	
 - 무한루프에 빠지지 않으려면? (func2)
	1) Base case : 적어도 하나의 recursion에 빠지지 않는 경우가 존재해야 한다.
	2) Recursive case : recursion을 반복하다보면 결국 base case로 수렴해야 한다.
	
 - 순환함수와 수학적귀납법 (func3, factorial)
	정리) func(int n)은 음이 아닌 정수  n에 대해서 0에서 n까지의 합을 올바로 계산한다.
	증명)
		1. n=0인 경우  : n = 0인 경우 0을 반환한다. 올바르다.
		2. 임의의 양의 정수 k에 대해서 n<k인 경우 0에서 n까지의 합을 올바르게 계산하여 반환한다고 가정하자.
		3. n=k인 경우를 고려해보자. func3은 먼저 func3(k-1)을 호출하는데 2번의 가정에 의해서 0에서 k-1까지의 합이 올바로 계산되어 반환된다.
		   메서드 func3은 그 값에 n을 더해서 반환하다. 따라서 메서드 func는 0에서 k까지의 합을 올바로 계산하여 반환한다.
		   
	증명) factorial(int n)은 음이 아닌 정수 n에 대해서 n!을 올바르게 계산한다.
	정리)
		1. n=0인 경우 : n=0인 경우 1을 반환한다.
		2. 임의의 양의 정수 k에 대해서 n<k인 경우 n!을 올바르게 계산한다고 가정하자.
		3. n=k인 경우를 고려해보자. factorial은 먼저 factorial(k-1) 호출하는데
		   2번의 가정에 의해서 (k-1)!이 올바르게 계산되어 반환된다. 따라서 메서드 factorial은 k*(k-1)! = k!을 반환한다.
		   
	- Xⁿ (power)
	- 피보나치 수열(fibonacci)
	- 최대공약수 : Euclid Method (gcd, gcd2)
		   
================================================================================================================================
◆ 순환(Recursion)의 개념과 기본예제 2

 **Code02.java 예제 참고
 
Recursive Thinking : 순환적으로 사고하기

Recursion은 수학함수 계산에만 유용한가?
-> 수학함수뿐 아니라 다른 많은 문제들을 recursion으로 해결할 수 있다.
		   
 - 문자열의 길이 계산(length)
 - 문자열의 프린트(printChars)
 - 문자열 뒤집어 프린트(printCharsReverse)
 - 2진수로 변환하여 출력(printInBinary)
 - 배열의 합 구하기(sum)
 
Recursion VS Iteration
 - 모든 순환함수는 반복문(iteration)으로 변경 가능
 - 그 역도 성립함. 즉 모든 반복문은 recursion으로 표현 가능함
 - 순환함수는 복잡한 알고리즘을 단순하고 알기 쉽게 표현하는 것을 가능하게 함
 - 하지만 함수 호출에 따른 오버헤드가 있음(매개변수 전달, 액티베이션 프레임 생성 등)
 
================================================================================================================================
◆ 순환(Recursion)의 개념과 기본예제 3

 **Code03.java 예제 참고 
 
Designing Recursion : 순환 알고리즘의 설계

	- 순환적 알고리즘 설계
	  1) 적어도 하나의 base case, 즉 순환되지 않고 종료되는 case가 있어야 함.
	  2) 모든 case는 결국 base case로 수렴해야 함.
	  
암시적(implicit) 매개변수를 명시적(explicit) 매개변수로 바꾸어라.
	- 순차탐색(search, search2, search3, search4)
	- 최대값 찾기(findMax, findMax2)
	- 이진 탐색(binarySearch)
	
================================================================================================================================
◆ Recursion의 응용 - 미로찾기 1

 **Code04.java 예제 참고 
 
* 이미지 참고 : Code04_1_미로찾기 / Code04_2_미로찾기예제결과.PNG

Recursive Thinking 리커시브하게 생각하라

	- 현재 위치에서 출구까지 가는 경로가 있으려면
	  1) 현재 위치가 출구이거나 혹은
	  2) 이웃한 셀들 중 하나에서 현재 위치를 지나지 않고 출구까지 가는 경로가 있거나
	  
	  
미로찾기(Decision Problem - 답이 yes or no인 문제)

--- 첫번쨰 예시(실패 케이스)
	boolean findPath(x, y)
		if(x, y) is the exit								<- 현재 위치가 출구이거나.
			return true;
			
		else
			for each neighbouring cell(x', y') of (x, y) do	<- 이웃한 셀들 중에서
				if(x', y') is on the pathway				<- 통로인 경우
					if findPath(x', y')						<- 출구까지 가는 경로가 있는지 다시 검사
						return ture;
			return false;
	*해설 : 이는 무한루프에 빠질 수 있다. 항상 recursion은 무한루프에 빠지지않는지?를 고려해야한다.
			-> 해결을 위해선 이미 방문한 위치와 그렇지 않은 위치를 표시해야 한다.
	
--- 두번쨰 예시
	boolean findPath(x, y)
		if (x, y) is the exit
			return true;
		else
			mark (x, y) as a visited cell;						<- 이미 방문한 위치 표시
			for each neighbouring cell(x', y') of (x, y) do		
				if(x', y') is on the pathway and not visited	<- 통로이면서 이미 방문한 위치가 아닌 경우
					if findPath(x', y')
						return ture;
			return false;
	
--- 세번쨰 예시
	boolean findPath(x, y)
		if(x, y) is either on the wall or a visited cell
			return false;
		else if (x,y) is the exit
			return true;
		else
			mark (x, y) as a visited cell;
			for each neighbouring cell (x', y') of (x, y) do
				if findPath(x', y')
					return true;
			return false;
	*해설 : 두번쨰 케이스와 같은 기능이지만 조금 더 메서드가 간단하다. but recursion의 횟수는 늘어난다.

================================================================================================================================
◆ Recursion의 응용 - Counting cells in a Blob

 **Code05.java 예제 참고 
 * 이미지 참고 : Code05_1~11_CountingCellsInABlob.PNG
 
--- Code05_1~2_CountingCellsInABlob.PNG
	- Binary 이미지
	- 각 픽셀은 background pixel 이거나 혹은 image pixel
	- 서로 연결된 image pixel들의 집합을 blob이라고 부른다.
	- 상하좌우 및 대각방향으로도 연결된 것으로 간주.
	
	입력 : N*N 크기의 2차원 그리드(grid)
		  하나의 좌표(x,y)
		
	출력 : 픽셀(x, y)가 포함된 blob의 크기
		  (x, y)가 어떤 blob에도 속하지 않는 경우에는 0
		  
Recursive Thinking
	현재 픽셀이 속한 blob의 크기를 카운트하려면
		-> 현재 픽셀이 image color가 아니라면 0을 반환한다.
		-> 현재 픽셀이 image color 라면
			먼저 현재 픽셀을 카운트 한다.(count=1)
			현재 픽셀이 중복카운트 되는 것을 방지하기 위해서 다른 색으로 칠한다.
			현재 픽셀에 이웃한 모든 픽셀들에 대해서 그 픽셀이 속한 blob의 크기를 카운트하여 카운터에 더해준다.
			해당 카운트를 반환한다.
			
순환적 알고리즘 Code05_3~11_CountingCellsInABlob.PNG

--- Algorithm for countCells(x, y)
	if the pixel(x, y) is outside the grid
		the result is 0;
	else if pixel(x, y) is not an image pixel or alrerady counted
		the result is 0;
	else
		set the color of the pixel(x, y) to a red color; <- red는 카운트 되었다는 것을 표시하기 위함
		the result is 1 plus the number of cells in each piece of the blob
			that includes a nearest neighbour;
	
================================================================================================================================
◆ Recursion의 응용 - N Queens problem

 **Code06.java 예제 참고 
 * 이미지 참고 : Code06_1_NQueensProblem.PNG
 
The eight queens problem

BackTracking이란? : 되추적 기법
	내가 내린 결정이 해가 아니라면 그 결정을 번복하고 다시 결정을 내리는 것.
	
상태공간트리
	- 상태공간트리란? 찾는 해(solution)를 포함하는 트리.
	즉, 해가 존재한다면 그것은 반드시 이 트리의 어떤 한 노드에 해당함
	따라서 이 트리를 체계적으로 탐색하면 해를 구할 수 있음.
	
	- 상태공간 트리의 모든 노드를 탐색해야 하는 것은 아니다.
	
되추적기법(Backtracking)
	- 상태공간트리를 "깊이 우선 방식으로 탐색"하여 해를 찾는 알고리즘을 말한다.
	
Design Recursion
	int[] cols = new int [N+1];
	boolean queens( int level ) <- 매개변수는 내가 현재 트리의 어떤 노드에 있는지를 지정해야 한다.
	{									cols[i] = j는 i번 말이 (i행 j)에 놓였음을 의미한다.
		if (!promising(level))
			return false;
		else if (level == N)	<- promising 테스트를 통과했다는 가정하에 level==N이면 모든 말이 놓였다는 의미이고
			return true;				 따라서 성공이다.
		for(int i=1; i<=N; i++) {	<- level+1번째 말을 각각의 열에 놓은 후 recursion을 호출한다.
			cols[level+1] = i;
			if(queens(level+1))
				return true;
		}
		return false
	}
	
	boolean promising(int level)
	{
		for (int i=1; i<level; i++) {
			if(cols[i] == cols[level])	<- 같은 열에 놓였는지 검사
				return false;
			else if on the same diagonal	<- 같은 대각선에 놓였는지 검사
				return false;
		}
		return true;
	}
	
================================================================================================================================
◆ 멱집합(Powerset) : 주어진 집합의 모든 부분집합의 집합.

Powerset
	{a,b,c,d,e,f}의 모든 부분집합을 나열하려면 a를 제외한 모든 {b,c,d,e,f}의 모든 부분집합을 나열하고
	{b,c,d,e,f}의 모든 부분집합에 {a}를 추가한 집합들을 나열한다.
	
--- 첫번째 예시(실패 케이스) -> 이렇게 하려면 powerSet 함수는 여러 개의 집합들을 return해야 한다...
	powerSet(S) <- mission : 집합 s의 멱집합을 출력하라
	if S is an empty set
		print nothing;
	else
		let t be the first element of S;
		find all subsets of S-{t} by calling powerSet(S-{t});
		print the subsets;
		print the subsets with adding t;
		
--- 두번째 예시 -> recursion 함수가 두 개의 집합을 매개변수로 받도록 설계해야 한다는 의미이다. 
				두번째 집합의 모든 부분 집합들에 첫번째 집합을 합집합하여 출력한다.
	powerSet(P, S)	<- mission : S의 멱집합을 구한 후 각각의 집합 P를 합집합하여 출력하라.
	if S is an empty set
		print P;
	else
		let t be the first element of S;
		powerSet(P, S-{t});
		powerSet(P U {t}, S - {t});
		
상태공간트리 (개념 설명은 아니며, 멱집합을 구할 때 사용 방법) *이미지 참고 : Code07_1_상태공간트리.PNG
	해를 찾기 위해 탐색할 필요가 있는 모든 후보들을 포함하는 트리
	트리의 모든 노드들을 방문하면 해를 찾을 수 있다.
	루트에서 출발하여 체계적으로 모든 노드를 방문하는 절차를 기술한다.